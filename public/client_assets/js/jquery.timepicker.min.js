/**
 * @license
 jquery-timepicker v1.11.15 - A jQuery timepicker plugin inspired by Google Calendar. It supports both mouse and keyboard navigation.
 Copyright (c) 2018 Jon Thornton - http://jonthornton.github.com/jquery-timepicker/
 License: MIT
*/
'use strict';
!function(factory) {
  if ("object" == typeof exports && exports && "object" == typeof module && module && module.exports === exports) {
    factory(require("jquery"));
  } else {
    if ("function" == typeof define && define.amd) {
      define(["jquery"], factory);
    } else {
      factory(jQuery);
    }
  }
}(function($) {
  /**
   * @param {!Object} element
   * @return {?}
   */
  function _isVisible(element) {
    var htmlElement = element[0];
    return htmlElement.offsetWidth > 0 && htmlElement.offsetHeight > 0;
  }
  /**
   * @param {!Object} settings
   * @return {?}
   */
  function _parseSettings(settings) {
    if (settings.minTime && (settings.minTime = _time2int(settings.minTime)), settings.maxTime && (settings.maxTime = _time2int(settings.maxTime)), settings.durationTime && "function" != typeof settings.durationTime && (settings.durationTime = _time2int(settings.durationTime)), "now" == settings.scrollDefault) {
      /**
       * @return {?}
       */
      settings.scrollDefault = function() {
        return settings.roundingFunction(_time2int(new Date), settings);
      };
    } else {
      if (settings.scrollDefault && "function" != typeof settings.scrollDefault) {
        var val = settings.scrollDefault;
        /**
         * @return {?}
         */
        settings.scrollDefault = function() {
          return settings.roundingFunction(_time2int(val), settings);
        };
      } else {
        if (settings.minTime) {
          /**
           * @return {?}
           */
          settings.scrollDefault = function() {
            return settings.roundingFunction(settings.minTime, settings);
          };
        }
      }
    }
    if ("string" === $.type(settings.timeFormat) && settings.timeFormat.match(/[gh]/) && (settings._twelveHourTime = true), settings.showOnFocus === false && settings.showOn.indexOf("focus") != -1 && settings.showOn.splice(settings.showOn.indexOf("focus"), 1), settings.disableTimeRanges.length > 0) {
      var i;
      for (i in settings.disableTimeRanges) {
        /** @type {!Array} */
        settings.disableTimeRanges[i] = [_time2int(settings.disableTimeRanges[i][0]), _time2int(settings.disableTimeRanges[i][1])];
      }
      settings.disableTimeRanges = settings.disableTimeRanges.sort(function(a, b) {
        return a[0] - b[0];
      });
      /** @type {number} */
      i = settings.disableTimeRanges.length - 1;
      for (; i > 0; i--) {
        if (settings.disableTimeRanges[i][0] <= settings.disableTimeRanges[i - 1][1]) {
          /** @type {!Array} */
          settings.disableTimeRanges[i - 1] = [Math.min(settings.disableTimeRanges[i][0], settings.disableTimeRanges[i - 1][0]), Math.max(settings.disableTimeRanges[i][1], settings.disableTimeRanges[i - 1][1])];
          settings.disableTimeRanges.splice(i, 1);
        }
      }
    }
    return settings;
  }
  /**
   * @param {!Object} self
   * @return {undefined}
   */
  function _render(self) {
    var settings = self.data("timepicker-settings");
    var list = self.data("timepicker-list");
    if (list && list.length && (list.remove(), self.data("timepicker-list", false)), settings.useSelect) {
      list = $("<select />", {
        "class" : "ui-timepicker-select"
      });
      if (self.attr("name")) {
        list.attr("name", "ui-timepicker-" + self.attr("name"));
      }
      var wrapped_list = list;
    } else {
      list = $("<ul />", {
        "class" : "ui-timepicker-list"
      });
      wrapped_list = $("<div />", {
        "class" : "ui-timepicker-wrapper",
        tabindex : -1
      });
      wrapped_list.css({
        display : "none",
        position : "absolute"
      }).append(list);
    }
    if (settings.noneOption) {
      if (settings.noneOption === true && (settings.noneOption = settings.useSelect ? "Time..." : "None"), $.isArray(settings.noneOption)) {
        var i;
        for (i in settings.noneOption) {
          if (parseInt(i, 10) == i) {
            var noneElement = _generateNoneElement(settings.noneOption[i], settings.useSelect);
            list.append(noneElement);
          }
        }
      } else {
        noneElement = _generateNoneElement(settings.noneOption, settings.useSelect);
        list.append(noneElement);
      }
    }
    if (settings.className && wrapped_list.addClass(settings.className), (null !== settings.minTime || null !== settings.durationTime) && settings.showDuration) {
      if ("function" == typeof settings.step) {
        "function";
      } else {
        settings.step;
      }
      wrapped_list.addClass("ui-timepicker-with-duration");
      wrapped_list.addClass("ui-timepicker-step-" + settings.step);
    }
    var durStart = settings.minTime;
    if ("function" == typeof settings.durationTime) {
      durStart = _time2int(settings.durationTime());
    } else {
      if (null !== settings.durationTime) {
        durStart = settings.durationTime;
      }
    }
    var start = null !== settings.minTime ? settings.minTime : 0;
    var end = null !== settings.maxTime ? settings.maxTime : start + _ONE_DAY - 1;
    if (end < start) {
      end = end + _ONE_DAY;
    }
    if (end === _ONE_DAY - 1 && "string" === $.type(settings.timeFormat) && settings.show2400) {
      /** @type {number} */
      end = _ONE_DAY;
    }
    var dr = settings.disableTimeRanges;
    /** @type {number} */
    var drCur = 0;
    var drLen = dr.length;
    var stepFunc = settings.step;
    if ("function" != typeof stepFunc) {
      /**
       * @return {?}
       */
      stepFunc = function() {
        return settings.step;
      };
    }
    i = start;
    /** @type {number} */
    var j = 0;
    for (; i <= end; j++, i = i + 60 * stepFunc(j)) {
      var timeInt = i;
      var timeString = _int2time(timeInt, settings);
      if (settings.useSelect) {
        var row = $("<option />", {
          value : timeString
        });
        row.text(timeString);
      } else {
        row = $("<li />");
        row.addClass(timeInt % _ONE_DAY < _ONE_DAY / 2 ? "ui-timepicker-am" : "ui-timepicker-pm");
        row.data("time", _moduloSeconds(timeInt, settings));
        row.text(timeString);
      }
      if ((null !== settings.minTime || null !== settings.durationTime) && settings.showDuration) {
        var durationString = _int2duration(i - durStart, settings.step);
        if (settings.useSelect) {
          row.text(row.text() + " (" + durationString + ")");
        } else {
          var uploadMsgDetail = $("<span />", {
            "class" : "ui-timepicker-duration"
          });
          uploadMsgDetail.text(" (" + durationString + ")");
          row.append(uploadMsgDetail);
        }
      }
      if (drCur < drLen) {
        if (timeInt >= dr[drCur][1]) {
          /** @type {number} */
          drCur = drCur + 1;
        }
        if (dr[drCur] && timeInt >= dr[drCur][0] && timeInt < dr[drCur][1]) {
          if (settings.useSelect) {
            row.prop("disabled", true);
          } else {
            row.addClass("ui-timepicker-disabled");
          }
        }
      }
      list.append(row);
    }
    if (wrapped_list.data("timepicker-input", self), self.data("timepicker-list", wrapped_list), settings.useSelect) {
      if (self.val()) {
        list.val(_roundAndFormatTime(_time2int(self.val()), settings));
      }
      list.on("focus", function() {
        $(this).data("timepicker-input").trigger("showTimepicker");
      });
      list.on("blur", function() {
        $(this).data("timepicker-input").trigger("hideTimepicker");
      });
      list.on("change", function() {
        _setTimeValue(self, $(this).val(), "select");
      });
      _setTimeValue(self, list.val(), "initial");
      self.hide().after(list);
    } else {
      var appendTo = settings.appendTo;
      if ("string" == typeof appendTo) {
        appendTo = $(appendTo);
      } else {
        if ("function" == typeof appendTo) {
          appendTo = appendTo(self);
        }
      }
      appendTo.append(wrapped_list);
      _setSelected(self, list);
      list.on("mousedown click", "li", function(canCreateDiscussions) {
        self.off("focus.timepicker");
        self.on("focus.timepicker-ie-hack", function() {
          self.off("focus.timepicker-ie-hack");
          self.on("focus.timepicker", methods.show);
        });
        if (!_hideKeyboard(self)) {
          self[0].focus();
        }
        list.find("li").removeClass("ui-timepicker-selected");
        $(this).addClass("ui-timepicker-selected");
        if (_selectValue(self)) {
          self.trigger("hideTimepicker");
          list.on("mouseup.timepicker click.timepicker", "li", function(a) {
            list.off("mouseup.timepicker click.timepicker");
            wrapped_list.hide();
          });
        }
      });
    }
  }
  /**
   * @param {!Object} optionValue
   * @param {?} useSelect
   * @return {?}
   */
  function _generateNoneElement(optionValue, useSelect) {
    var label;
    var className;
    var value;
    return "object" == typeof optionValue ? (label = optionValue.label, className = optionValue.className, value = optionValue.value) : "string" == typeof optionValue ? (label = optionValue, value = "") : $.error("Invalid noneOption value"), useSelect ? $("<option />", {
      value : value,
      "class" : className,
      text : label
    }) : $("<li />", {
      "class" : className,
      text : label
    }).data("time", String(value));
  }
  /**
   * @param {number} seconds
   * @param {!Object} settings
   * @return {?}
   */
  function _roundAndFormatTime(seconds, settings) {
    if (seconds = settings.roundingFunction(seconds, settings), null !== seconds) {
      return _int2time(seconds, settings);
    }
  }
  /**
   * @param {!Event} event
   * @return {undefined}
   */
  function reply(event) {
    if (event.target != window) {
      var jField = $(event.target);
      if (!(jField.closest(".ui-timepicker-input").length || jField.closest(".ui-timepicker-wrapper").length)) {
        methods.hide();
        $(document).unbind(".ui-timepicker");
        $(window).unbind(".ui-timepicker");
      }
    }
  }
  /**
   * @param {!Object} self
   * @return {?}
   */
  function _hideKeyboard(self) {
    var settings = self.data("timepicker-settings");
    return (window.navigator.msMaxTouchPoints || "ontouchstart" in document) && settings.disableTouchKeyboard;
  }
  /**
   * @param {!Object} self
   * @param {!Object} list
   * @param {number} value
   * @return {?}
   */
  function _findRow(self, list, value) {
    if (!value && 0 !== value) {
      return false;
    }
    var settings = self.data("timepicker-settings");
    /** @type {boolean} */
    var eventMark = false;
    value = settings.roundingFunction(value, settings);
    return list.find("li").each(function(b, c) {
      var e = $(c);
      if ("number" == typeof e.data("time")) {
        return e.data("time") == value ? (eventMark = e, false) : void 0;
      }
    }), eventMark;
  }
  /**
   * @param {!Object} self
   * @param {!Object} list
   * @return {undefined}
   */
  function _setSelected(self, list) {
    list.find("li").removeClass("ui-timepicker-selected");
    var settings = self.data("timepicker-settings");
    var timeValue = _time2int(_getTimeValue(self), settings);
    if (null !== timeValue) {
      var selected = _findRow(self, list, timeValue);
      if (selected) {
        /** @type {number} */
        var f = selected.offset().top - list.offset().top;
        if (f + selected.outerHeight() > list.outerHeight() || f < 0) {
          list.scrollTop(list.scrollTop() + selected.position().top - selected.outerHeight());
        }
        if (settings.forceRoundTime || selected.data("time") === timeValue) {
          selected.addClass("ui-timepicker-selected");
        }
      }
    }
  }
  /**
   * @param {string} e
   * @param {string} origin
   * @return {?}
   */
  function _formatValue(e, origin) {
    if ("timepicker" != origin) {
      var self = $(this);
      if ("" === this.value) {
        return void _setTimeValue(self, null, origin);
      }
      if (!self.is(":focus") || e && "change" == e.type) {
        var settings = self.data("timepicker-settings");
        var seconds = _time2int(this.value, settings);
        if (null === seconds) {
          return void self.trigger("timeFormatError");
        }
        /** @type {boolean} */
        var g = false;
        if (null !== settings.minTime && null !== settings.maxTime && (seconds < settings.minTime || seconds > settings.maxTime) && (g = true), $.each(settings.disableTimeRanges, function() {
          if (seconds >= this[0] && seconds < this[1]) {
            return g = true, false;
          }
        }), settings.forceRoundTime) {
          var roundSeconds = settings.roundingFunction(seconds, settings);
          if (roundSeconds != seconds) {
            seconds = roundSeconds;
            /** @type {null} */
            origin = null;
          }
        }
        var prettyTime = _int2time(seconds, settings);
        if (g) {
          if (_setTimeValue(self, prettyTime, "error") || e && "change" == e.type) {
            self.trigger("timeRangeError");
          }
        } else {
          _setTimeValue(self, prettyTime, origin);
        }
      }
    }
  }
  /**
   * @param {!Object} self
   * @return {?}
   */
  function _getTimeValue(self) {
    return self.is("input") ? self.val() : self.data("ui-timepicker-value");
  }
  /**
   * @param {!Object} self
   * @param {!Object} value
   * @param {string} type
   * @return {?}
   */
  function _setTimeValue(self, value, type) {
    if (self.is("input")) {
      self.val(value);
      var settings = self.data("timepicker-settings");
      if (settings.useSelect && "select" != type && self.data("timepicker-list")) {
        self.data("timepicker-list").val(_roundAndFormatTime(_time2int(value), settings));
      }
    }
    return self.data("ui-timepicker-value") != value ? (self.data("ui-timepicker-value", value), "select" == type ? self.trigger("selectTime").trigger("changeTime").trigger("change", "timepicker") : ["error", "initial"].indexOf(type) == -1 && self.trigger("changeTime"), true) : (["error", "initial"].indexOf(type) == -1 && self.trigger("selectTime"), false);
  }
  /**
   * @param {!Event} event
   * @return {undefined}
   */
  function customInputEvents(event) {
    switch(event.keyCode) {
      case 13:
      case 9:
        return;
      default:
        event.preventDefault();
    }
  }
  /**
   * @param {!Event} e
   * @return {?}
   */
  function _keydownhandler(e) {
    var self = $(this);
    var list = self.data("timepicker-list");
    if (!list || !_isVisible(list)) {
      if (40 != e.keyCode) {
        return true;
      }
      methods.show.call(self.get(0));
      list = self.data("timepicker-list");
      if (!_hideKeyboard(self)) {
        self.focus();
      }
    }
    switch(e.keyCode) {
      case 13:
        return _selectValue(self) && (_formatValue.call(self.get(0), {
          type : "change"
        }), methods.hide.apply(this)), e.preventDefault(), false;
      case 38:
        var selected = list.find(".ui-timepicker-selected");
        return selected.length ? selected.is(":first-child") || (selected.removeClass("ui-timepicker-selected"), selected.prev().addClass("ui-timepicker-selected"), selected.prev().position().top < selected.outerHeight() && list.scrollTop(list.scrollTop() - selected.outerHeight())) : (list.find("li").each(function(b, href) {
          if ($(href).position().top > 0) {
            return selected = $(href), false;
          }
        }), selected.addClass("ui-timepicker-selected")), false;
      case 40:
        return selected = list.find(".ui-timepicker-selected"), 0 === selected.length ? (list.find("li").each(function(b, href) {
          if ($(href).position().top > 0) {
            return selected = $(href), false;
          }
        }), selected.addClass("ui-timepicker-selected")) : selected.is(":last-child") || (selected.removeClass("ui-timepicker-selected"), selected.next().addClass("ui-timepicker-selected"), selected.next().position().top + 2 * selected.outerHeight() > list.outerHeight() && list.scrollTop(list.scrollTop() + selected.outerHeight())), false;
      case 27:
        list.find("li").removeClass("ui-timepicker-selected");
        methods.hide();
        break;
      case 9:
        methods.hide();
        break;
      default:
        return true;
    }
  }
  /**
   * @param {!Object} e
   * @return {?}
   */
  function _keyuphandler(e) {
    var self = $(this);
    var list = self.data("timepicker-list");
    var settings = self.data("timepicker-settings");
    if (!list || !_isVisible(list) || settings.disableTextInput) {
      return true;
    }
    if ("paste" === e.type || "cut" === e.type) {
      return void setTimeout(function() {
        if (settings.typeaheadHighlight) {
          _setSelected(self, list);
        } else {
          list.hide();
        }
      }, 0);
    }
    switch(e.keyCode) {
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 65:
      case 77:
      case 80:
      case 186:
      case 8:
      case 46:
        if (settings.typeaheadHighlight) {
          _setSelected(self, list);
        } else {
          list.hide();
        }
    }
  }
  /**
   * @param {!Object} self
   * @return {?}
   */
  function _selectValue(self) {
    var settings = self.data("timepicker-settings");
    var list = self.data("timepicker-list");
    /** @type {null} */
    var timeValue = null;
    var selected = list.find(".ui-timepicker-selected");
    return !selected.hasClass("ui-timepicker-disabled") && (selected.length && (timeValue = selected.data("time")), null !== timeValue && ("string" != typeof timeValue && (timeValue = _int2time(timeValue, settings)), _setTimeValue(self, timeValue, "select")), true);
  }
  /**
   * @param {number} seconds
   * @param {number} step
   * @return {?}
   */
  function _int2duration(seconds, step) {
    /** @type {number} */
    seconds = Math.abs(seconds);
    var value;
    var mins;
    /** @type {number} */
    var minutes = Math.round(seconds / 60);
    /** @type {!Array} */
    var duration = [];
    return minutes < 60 ? duration = [minutes, _lang.mins] : (value = Math.floor(minutes / 60), mins = minutes % 60, 30 == step && 30 == mins && (value = value + (_lang.decimal + 5)), duration.push(value), duration.push(1 == value ? _lang.hr : _lang.hrs), 30 != step && mins && (duration.push(mins), duration.push(_lang.mins))), duration.join(" ");
  }
  /**
   * @param {number} timeInt
   * @param {!Object} settings
   * @return {?}
   */
  function _int2time(timeInt, settings) {
    if ("number" != typeof timeInt) {
      return null;
    }
    /** @type {number} */
    var seconds = parseInt(timeInt % 60);
    /** @type {number} */
    var minutes = parseInt(timeInt / 60 % 60);
    /** @type {number} */
    var hours = parseInt(timeInt / 3600 % 24);
    /** @type {!Date} */
    var time = new Date(1970, 0, 2, hours, minutes, seconds, 0);
    if (isNaN(time.getTime())) {
      return null;
    }
    if ("function" === $.type(settings.timeFormat)) {
      return settings.timeFormat(time);
    }
    var value;
    var attribute;
    /** @type {string} */
    var output = "";
    /** @type {number} */
    var i = 0;
    for (; i < settings.timeFormat.length; i++) {
      switch(attribute = settings.timeFormat.charAt(i)) {
        case "a":
          output = output + (time.getHours() > 11 ? _lang.pm : _lang.am);
          break;
        case "A":
          output = output + (time.getHours() > 11 ? _lang.PM : _lang.AM);
          break;
        case "g":
          /** @type {number} */
          value = time.getHours() % 12;
          output = output + (0 === value ? "12" : value);
          break;
        case "G":
          /** @type {number} */
          value = time.getHours();
          if (timeInt === _ONE_DAY) {
            /** @type {number} */
            value = settings.show2400 ? 24 : 0;
          }
          output = output + value;
          break;
        case "h":
          /** @type {number} */
          value = time.getHours() % 12;
          if (0 !== value && value < 10) {
            /** @type {string} */
            value = "0" + value;
          }
          output = output + (0 === value ? "12" : value);
          break;
        case "H":
          /** @type {number} */
          value = time.getHours();
          if (timeInt === _ONE_DAY) {
            /** @type {number} */
            value = settings.show2400 ? 24 : 0;
          }
          output = output + (value > 9 ? value : "0" + value);
          break;
        case "i":
          /** @type {number} */
          minutes = time.getMinutes();
          output = output + (minutes > 9 ? minutes : "0" + minutes);
          break;
        case "s":
          /** @type {number} */
          seconds = time.getSeconds();
          output = output + (seconds > 9 ? seconds : "0" + seconds);
          break;
        case "\\":
          i++;
          output = output + settings.timeFormat.charAt(i);
          break;
        default:
          output = output + attribute;
      }
    }
    return output;
  }
  /**
   * @param {!Object} value
   * @param {!Function} settings
   * @return {?}
   */
  function _time2int(value, settings) {
    if ("" === value || null === value) {
      return null;
    }
    if ("object" == typeof value) {
      return 3600 * value.getHours() + 60 * value.getMinutes() + value.getSeconds();
    }
    if ("string" != typeof value) {
      return value;
    }
    /** @type {string} */
    value = value.toLowerCase().replace(/[\s\.]/g, "");
    if (!("a" != value.slice(-1) && "p" != value.slice(-1))) {
      /** @type {string} */
      value = value + "m";
    }
    /** @type {string} */
    var escRightBracket = "(" + _lang.am.replace(".", "") + "|" + _lang.pm.replace(".", "") + "|" + _lang.AM.replace(".", "") + "|" + _lang.PM.replace(".", "") + ")?";
    /** @type {!RegExp} */
    var d = new RegExp("^" + escRightBracket + "([0-9]?[0-9])\\W?([0-5][0-9])?\\W?([0-5][0-9])?" + escRightBracket + "$");
    /** @type {(Array<string>|null)} */
    var t = value.match(d);
    if (!t) {
      return null;
    }
    /** @type {number} */
    var hour = parseInt(1 * t[2], 10);
    /** @type {string} */
    var ampm = t[1] || t[5];
    /** @type {number} */
    var hours = hour;
    /** @type {number} */
    var minute = 1 * t[3] || 0;
    /** @type {number} */
    var seconds = 1 * t[4] || 0;
    if (hour <= 12 && ampm) {
      /** @type {boolean} */
      var isPm = ampm == _lang.pm || ampm == _lang.PM;
      /** @type {number} */
      hours = 12 == hour ? isPm ? 12 : 0 : hour + (isPm ? 12 : 0);
    } else {
      if (settings) {
        /** @type {number} */
        var t = 3600 * hour + 60 * minute + seconds;
        if (t >= _ONE_DAY + (settings.show2400 ? 1 : 0)) {
          if (settings.wrapHours === false) {
            return null;
          }
          /** @type {number} */
          hours = hour % 24;
        }
      }
    }
    /** @type {number} */
    var timeInt = 3600 * hours + 60 * minute + seconds;
    if (hour < 12 && !ampm && settings && settings._twelveHourTime && settings.scrollDefault) {
      /** @type {number} */
      var delta = timeInt - settings.scrollDefault();
      if (delta < 0 && delta >= _ONE_DAY / -2) {
        /** @type {number} */
        timeInt = (timeInt + _ONE_DAY / 2) % _ONE_DAY;
      }
    }
    return timeInt;
  }
  /**
   * @param {number} seconds
   * @param {!Object} settings
   * @return {?}
   */
  function _moduloSeconds(seconds, settings) {
    return seconds == _ONE_DAY && settings.show2400 ? seconds : seconds % _ONE_DAY;
  }
  /** @type {number} */
  var _ONE_DAY = 86400;
  var _lang = {
    am : "am",
    pm : "pm",
    AM : "AM",
    PM : "PM",
    decimal : ".",
    mins : "mins",
    hr : "hr",
    hrs : "hrs"
  };
  var _DEFAULTS = {
    appendTo : "body",
    className : null,
    closeOnWindowScroll : false,
    disableTextInput : false,
    disableTimeRanges : [],
    disableTouchKeyboard : false,
    durationTime : null,
    forceRoundTime : false,
    maxTime : null,
    minTime : null,
    noneOption : false,
    orientation : "l",
    roundingFunction : function(seconds, settings) {
      if (null === seconds) {
        return null;
      }
      if ("number" != typeof settings.step) {
        return seconds;
      }
      /** @type {number} */
      var offset = seconds % (60 * settings.step);
      var start = settings.minTime || 0;
      return offset = offset - start % (60 * settings.step), offset >= 30 * settings.step ? seconds = seconds + (60 * settings.step - offset) : seconds = seconds - offset, _moduloSeconds(seconds, settings);
    },
    scrollDefault : null,
    selectOnBlur : false,
    show2400 : false,
    showDuration : false,
    showOn : ["click", "focus"],
    showOnFocus : true,
    step : 30,
    stopScrollPropagation : false,
    timeFormat : "g:ia",
    typeaheadHighlight : true,
    useSelect : false,
    wrapHours : true
  };
  var methods = {
    init : function(custom) {
      return this.each(function() {
        var self = $(this);
        /** @type {!Array} */
        var options = [];
        var key;
        for (key in _DEFAULTS) {
          if (self.data(key)) {
            options[key] = self.data(key);
          }
        }
        var settings = $.extend({}, _DEFAULTS, custom, options);
        if (settings.lang && (_lang = $.extend(_lang, settings.lang)), settings = _parseSettings(settings), self.data("timepicker-settings", settings), self.addClass("ui-timepicker-input"), settings.useSelect) {
          _render(self);
        } else {
          if (self.prop("autocomplete", "off"), settings.showOn) {
            var i;
            for (i in settings.showOn) {
              self.on(settings.showOn[i] + ".timepicker", methods.show);
            }
          }
          self.on("change.timepicker", _formatValue);
          self.on("keydown.timepicker", _keydownhandler);
          self.on("keyup.timepicker", _keyuphandler);
          if (settings.disableTextInput) {
            self.on("keydown.timepicker", customInputEvents);
          }
          self.on("cut.timepicker", _keyuphandler);
          self.on("paste.timepicker", _keyuphandler);
          _formatValue.call(self.get(0), null, "initial");
        }
      });
    },
    show : function(event) {
      var self = $(this);
      var settings = self.data("timepicker-settings");
      if (event && event.preventDefault(), settings.useSelect) {
        return void self.data("timepicker-list").focus();
      }
      if (_hideKeyboard(self)) {
        self.blur();
      }
      var list = self.data("timepicker-list");
      if (!self.prop("readonly") && (list && 0 !== list.length && "function" != typeof settings.durationTime || (_render(self), list = self.data("timepicker-list")), !_isVisible(list))) {
        self.data("ui-timepicker-value", self.val());
        _setSelected(self, list);
        methods.hide();
        list.show();
        var frame = {};
        if (settings.orientation.match(/r/)) {
          /** @type {number} */
          frame.left = self.offset().left + self.outerWidth() - list.outerWidth() + parseInt(list.css("marginLeft").replace("px", ""), 10);
        } else {
          frame.left = self.offset().left + parseInt(list.css("marginLeft").replace("px", ""), 10);
        }
        var value;
        /** @type {string} */
        value = settings.orientation.match(/t/) ? "t" : settings.orientation.match(/b/) ? "b" : self.offset().top + self.outerHeight(true) + list.outerHeight() > $(window).height() + $(window).scrollTop() ? "t" : "b";
        if ("t" == value) {
          list.addClass("ui-timepicker-positioned-top");
          /** @type {number} */
          frame.top = self.offset().top - list.outerHeight() + parseInt(list.css("marginTop").replace("px", ""), 10);
        } else {
          list.removeClass("ui-timepicker-positioned-top");
          frame.top = self.offset().top + self.outerHeight() + parseInt(list.css("marginTop").replace("px", ""), 10);
        }
        list.offset(frame);
        var selected = list.find(".ui-timepicker-selected");
        if (!selected.length) {
          var timeInt = _time2int(_getTimeValue(self));
          if (null !== timeInt) {
            selected = _findRow(self, list, timeInt);
          } else {
            if (settings.scrollDefault) {
              selected = _findRow(self, list, settings.scrollDefault());
            }
          }
        }
        if (selected.length && !selected.hasClass("ui-timepicker-disabled") || (selected = list.find("li:not(.ui-timepicker-disabled):first")), selected && selected.length) {
          /** @type {number} */
          var topOffset = list.scrollTop() + selected.position().top - selected.outerHeight();
          list.scrollTop(topOffset);
        } else {
          list.scrollTop(0);
        }
        return settings.stopScrollPropagation && $(document).on("wheel.ui-timepicker", ".ui-timepicker-wrapper", function(event) {
          event.preventDefault();
          var currentScroll = $(this).scrollTop();
          $(this).scrollTop(currentScroll + event.originalEvent.deltaY);
        }), $(document).on("touchstart.ui-timepicker mousedown.ui-timepicker", reply), $(window).on("resize.ui-timepicker", reply), settings.closeOnWindowScroll && $(document).on("scroll.ui-timepicker", reply), self.trigger("showTimepicker"), this;
      }
    },
    hide : function(keepCurrentModal) {
      var self = $(this);
      var settings = self.data("timepicker-settings");
      return settings && settings.useSelect && self.blur(), $(".ui-timepicker-wrapper").each(function() {
        var list = $(this);
        if (_isVisible(list)) {
          var self = list.data("timepicker-input");
          var settings = self.data("timepicker-settings");
          if (settings && settings.selectOnBlur) {
            _selectValue(self);
          }
          list.hide();
          self.trigger("hideTimepicker");
        }
      }), this;
    },
    option : function(key, value) {
      return "string" == typeof key && "undefined" == typeof value ? $(this).data("timepicker-settings")[key] : this.each(function() {
        var self = $(this);
        var settings = self.data("timepicker-settings");
        var list = self.data("timepicker-list");
        if ("object" == typeof key) {
          settings = $.extend(settings, key);
        } else {
          if ("string" == typeof key) {
            settings[key] = value;
          }
        }
        settings = _parseSettings(settings);
        self.data("timepicker-settings", settings);
        _formatValue.call(self.get(0), {
          type : "change"
        }, "initial");
        if (list) {
          list.remove();
          self.data("timepicker-list", false);
        }
        if (settings.useSelect) {
          _render(self);
        }
      });
    },
    getSecondsFromMidnight : function() {
      return _time2int(_getTimeValue(this));
    },
    getTime : function(relative_date) {
      var self = this;
      var time_string = _getTimeValue(self);
      if (!time_string) {
        return null;
      }
      var offset = _time2int(time_string);
      if (null === offset) {
        return null;
      }
      if (!relative_date) {
        /** @type {!Date} */
        relative_date = new Date;
      }
      /** @type {!Date} */
      var time = new Date(relative_date);
      return time.setHours(offset / 3600), time.setMinutes(offset % 3600 / 60), time.setSeconds(offset % 60), time.setMilliseconds(0), time;
    },
    isVisible : function() {
      var self = this;
      var list = self.data("timepicker-list");
      return !(!list || !_isVisible(list));
    },
    setTime : function(value) {
      var self = this;
      var settings = self.data("timepicker-settings");
      if (settings.forceRoundTime) {
        var prettyTime = _roundAndFormatTime(_time2int(value), settings);
      } else {
        prettyTime = _int2time(_time2int(value), settings);
      }
      return value && null === prettyTime && settings.noneOption && (prettyTime = value), _setTimeValue(self, prettyTime, "initial"), _formatValue.call(self.get(0), {
        type : "change"
      }, "initial"), self.data("timepicker-list") && _setSelected(self, self.data("timepicker-list")), this;
    },
    remove : function() {
      var self = this;
      if (self.hasClass("ui-timepicker-input")) {
        var settings = self.data("timepicker-settings");
        return self.removeAttr("autocomplete", "off"), self.removeClass("ui-timepicker-input"), self.removeData("timepicker-settings"), self.off(".timepicker"), self.data("timepicker-list") && self.data("timepicker-list").remove(), settings.useSelect && self.show(), self.removeData("timepicker-list"), this;
      }
    }
  };
  /**
   * @param {string} o
   * @return {?}
   */
  $.fn.timepicker = function(o) {
    return this.length ? methods[o] ? this.hasClass("ui-timepicker-input") ? methods[o].apply(this, Array.prototype.slice.call(arguments, 1)) : this : "object" != typeof o && o ? void $.error("Method " + o + " does not exist on jQuery.timepicker") : methods.init.apply(this, arguments) : this;
  };
});
